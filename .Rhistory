usethis::use_package('SummarizedExperiment', 'dep')
usethis::use_package('SpatialExperiment', 'dep')
BiocManager::install('SpatialExperiment')
se_empty1 = SummarizedExperiment()
se_empty2 = SummarizedExperiment()
library(SummarizedExperiment)
library(SingleCellExperiment)
library(SpatialExperiment)
se_empty1 = SummarizedExperiment()
se_empty2 = SummarizedExperiment()
se_empty_list = list(se_empty1, se_empty2)
SummarizedExperiment(list('counts', matrix(1, 3, 3)))
SummarizedExperiment(list('counts' = matrix(1, 3, 3)))
SummarizedExperiment(list('counts' = matrix(1, 3, 3))) |> colData()
x = matrix(1, 3, 3)
colnames(x) = LETTERS[1:3]
x
SummarizedExperiment(list('counts' = x)) |> colData()
SummarizedExperiment(list('counts' = x))
SummarizedExperiment(list('counts' = x)) |> colData() |> rownames()
devtools::test()
library(ExperimentList)
devtools::test()
library(SummarizedExperiment)
library(SingleCellExperiment)
library(SpatialExperiment)
library(testthat)
#empty object
expect_true(validObject(.SummarizedExperimentList())) #internal
#empty object
expect_true(validObject(.SummarizedExperimentList())) #internal
expect_true(validObject(SummarizedExperimentList())) #exported
devtools::test()
expect_true(validObject(SummarizedExperimentList())) #exported
.SummarizedExperimentList()
validObject(.SummarizedExperimentList())
library(ExperimentList)
SummarizedExperiment()
SummarizedExperiment() |> validObject()
expect_true(validObject(SummarizedExperimentList())) #exported
library(ExperimentList)
expect_true(validObject(SummarizedExperimentList())) #exported
?SummarizedExperiment
expect_true(validObject(SummarizedExperimentList())) #exported
expect_true(validObject(.SummarizedExperimentList())) #exported
devtools::test()
library(ExperimentList)
devtools::test()
#empty objects in the list
se_empty1 = SummarizedExperiment()
se_empty2 = SummarizedExperiment()
se_empty_list = list(se_empty1, se_empty2)
expect_error(SummarizedExperimentList(se_empty_list))
names(se_empty_list) = LETTERS[1:2]
expect_true(validObject(SummarizedExperimentList(se_empty_list)))
experiments
devtools::test()
experiments
x
y
colnames(x)
paste(colnames(x), y, sep = '.')
devtools::test()
library(ExperimentList)
devtools::test()
library(ExperimentList)
devtools::test()
x
y
library(ExperimentList)
devtools::test()
mapply(function(x, y) {
#if colnames present, change
if (!is.null(colnames(x)))
colnames(x) = paste(colnames(x), y, sep = '.')
return(x)
}, experiments, experimentNames, SIMPLIFY = FALSE)
DataFrame(row.names = experimentNames)
do.call(SummarizedExperiment::cbind, experiments)
SummarizedExperiment::combineCols
devtools::test()
library(SummarizedExperiment)
library(SingleCellExperiment)
library(SpatialExperiment)
#empty object
expect_true(validObject(.SummarizedExperimentList())) #internal
expect_true(validObject(SummarizedExperimentList())) #exported
#empty objects in the list
se_empty1 = SummarizedExperiment()
se_empty2 = SummarizedExperiment()
se_empty_list = list(se_empty1, se_empty2)
expect_error(SummarizedExperimentList(se_empty_list))
names(se_empty_list) = LETTERS[1:2]
expect_true(validObject(SummarizedExperimentList(se_empty_list)))
#with annotations
edata = data.frame('ID' = 1:3, row.names = letters[1:3])
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
edata = edata[1:2, ]
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
rownames(edata) = NULL
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
SummarizedExperimentList(se_empty_list, experimentData = edata, check.names = FALSE)
experimentData
#with annotations
edata = data.frame('ID' = 1:3, row.names = letters[1:3])
edata
edata[1:2, ]
devtools::test()
#with annotations
edata = data.frame('ID' = 1:3, row.names = letters[1:3])
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
edata = edata[1:2, , drop = FALSE]
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
rownames(edata) = NULL
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
expect_true(validObject(SummarizedExperimentList(se_empty_list, experimentData = edata, check.names = FALSE)))
experimentData
se
.SummarizedExperimentList(se, experimentData = experimentData)
?S4Vectors::DataFrame
devtools::test()
experimentData
as(experimentData, 'DataFrame')
devtools::test()
Q
c
library(ExperimentList)
devtools::test()
#with annotations
edata = data.frame('ID' = 1:3, row.names = letters[1:3])
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
edata = edata[1:2, , drop = FALSE]
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
rownames(edata) = NULL
library(SummarizedExperiment)
library(SingleCellExperiment)
library(SpatialExperiment)
#empty object
expect_true(validObject(.SummarizedExperimentList())) #internal
expect_true(validObject(SummarizedExperimentList())) #exported
#empty objects in the list
se_empty1 = SummarizedExperiment()
se_empty2 = SummarizedExperiment()
se_empty_list = list(se_empty1, se_empty2)
expect_error(SummarizedExperimentList(se_empty_list))
names(se_empty_list) = LETTERS[1:2]
expect_true(validObject(SummarizedExperimentList(se_empty_list)))
#with annotations
edata = data.frame('ID' = 1:3, row.names = letters[1:3])
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
edata = edata[1:2, , drop = FALSE]
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
rownames(edata) = NULL
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
expect_true(validObject(SummarizedExperimentList(se_empty_list, experimentData = edata, check.names = FALSE)))
se
experimentData
experimentData |> class()
expect_true(validObject(SummarizedExperimentList(se_empty_list, experimentData = edata, check.names = FALSE)))
experimentData
?is
class(experimentData)
is(experimentData, 'data.frame')
devtools::test()
#non-empty data
mat = matrix(1, 3, 3)
se1 = SummarizedExperiment(assays = list(mat))
se2 = SummarizedExperiment(assays = list(mat))
se_list = list(se1, se2)
expect_true(validObject(SummarizedExperimentList(se_list)))
devtools::test()
library(SummarizedExperiment)
library(SingleCellExperiment)
library(SpatialExperiment)
#empty object
expect_true(validObject(.SummarizedExperimentList())) #internal
expect_true(validObject(SummarizedExperimentList())) #exported
#empty objects in the list
se_empty1 = SummarizedExperiment()
se_empty2 = SummarizedExperiment()
se_empty_list = list(se_empty1, se_empty2)
expect_error(SummarizedExperimentList(se_empty_list))
names(se_empty_list) = LETTERS[1:2]
expect_true(validObject(SummarizedExperimentList(se_empty_list)))
#with annotations
edata = data.frame('ID' = 1:3, row.names = letters[1:3])
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
edata = edata[1:2, , drop = FALSE]
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
rownames(edata) = NULL
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
expect_true(validObject(SummarizedExperimentList(se_empty_list, experimentData = edata, check.names = FALSE)))
rownames(edata) = LETTERS[1:2]
expect_true(validObject(SummarizedExperimentList(se_empty_list, experimentData = edata)))
#non-empty data
mat = matrix(1, 3, 3)
se1 = SummarizedExperiment(assays = list(mat))
se2 = SummarizedExperiment(assays = list(mat))
se_list = list('SE1' = se1, 'SE2' = se2)
expect_true(validObject(SummarizedExperimentList(se_list)))
colnames(mat) = LETTERS[1:3]
rownames(mat) = letters[1:3]
se1 = SummarizedExperiment(assays = list(mat))
se2 = SummarizedExperiment(assays = list(mat))
se_list = list('SE1' = se1, 'SE2' = se2)
expect_true(validObject(SummarizedExperimentList(se_list)))
expect_error(validObject(SummarizedExperimentList(se_list, change.names = FALSE)))
SummarizedExperimentList(se_list, change.names = FALSE)
SummarizedExperimentList(se_list, change.names = FALSE) |> colnames()
devtools::test()
?rep
rep(1:3, times = c(2,3,2))
devtools::test()
library(SummarizedExperiment)
library(SingleCellExperiment)
library(SpatialExperiment)
#empty object
expect_true(validObject(.SummarizedExperimentList())) #internal
expect_true(validObject(SummarizedExperimentList())) #exported
#empty objects in the list
se_empty1 = SummarizedExperiment()
se_empty2 = SummarizedExperiment()
se_empty_list = list(se_empty1, se_empty2)
expect_error(SummarizedExperimentList(se_empty_list))
names(se_empty_list) = LETTERS[1:2]
expect_true(validObject(SummarizedExperimentList(se_empty_list)))
#with annotations
edata = data.frame('ID' = 1:3, row.names = letters[1:3])
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
edata = edata[1:2, , drop = FALSE]
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
rownames(edata) = NULL
expect_error(SummarizedExperimentList(se_empty_list, experimentData = edata))
expect_true(validObject(SummarizedExperimentList(se_empty_list, experimentData = edata, check.names = FALSE)))
rownames(edata) = LETTERS[1:2]
expect_true(validObject(SummarizedExperimentList(se_empty_list, experimentData = edata)))
#non-empty data
mat = matrix(1, 3, 3)
se1 = SummarizedExperiment(assays = list(mat))
se2 = SummarizedExperiment(assays = list(mat))
se_list = list('SE1' = se1, 'SE2' = se2)
expect_true(validObject(SummarizedExperimentList(se_list)))
colnames(mat) = LETTERS[1:3]
rownames(mat) = letters[1:3]
se1 = SummarizedExperiment(assays = list(mat))
se2 = SummarizedExperiment(assays = list(mat))
se_list = list('SE1' = se1, 'SE2' = se2)
expect_true(validObject(SummarizedExperimentList(se_list)))
validObject(SummarizedExperimentList(se_list))
SummarizedExperimentList(se_list)
library(ExperimentList)
1
library(ExperimentList)
SummarizedExperimentList(se_list)
SummarizedExperimentList(se_list)@experimentData
SummarizedExperimentList(se_list)@experimentIndices
SummarizedExperimentList(se_list)@experimentIndex
test_that("Constructor works (RangedSummarizedExperiment)", {
library(SummarizedExperiment)
#empty object
expect_true(validObject(.RangedSummarizedExperimentList())) #internal
expect_true(validObject(RangedSummarizedExperimentList())) #exported
#empty objects in the list
se_empty1 = RangedSummarizedExperiment()
se_empty2 = RangedSummarizedExperiment()
se_empty_list = list(se_empty1, se_empty2)
expect_error(RangedSummarizedExperimentList(se_empty_list))
names(se_empty_list) = LETTERS[1:2]
expect_true(validObject(RangedSummarizedExperimentList(se_empty_list)))
#with annotations
edata = data.frame('ID' = 1:3, row.names = letters[1:3])
expect_error(RangedSummarizedExperimentList(se_empty_list, experimentData = edata))
edata = edata[1:2, , drop = FALSE]
expect_error(RangedSummarizedExperimentList(se_empty_list, experimentData = edata))
rownames(edata) = NULL
expect_error(RangedSummarizedExperimentList(se_empty_list, experimentData = edata))
expect_true(validObject(RangedSummarizedExperimentList(se_empty_list, experimentData = edata, check.names = FALSE)))
rownames(edata) = LETTERS[1:2]
expect_true(validObject(RangedSummarizedExperimentList(se_empty_list, experimentData = edata)))
#non-empty data
mat = matrix(1, 3, 3)
se1 = RangedSummarizedExperiment(assays = list(mat))
se2 = RangedSummarizedExperiment(assays = list(mat))
se_list = list('SE1' = se1, 'SE2' = se2)
expect_true(validObject(RangedSummarizedExperimentList(se_list)))
colnames(mat) = LETTERS[1:3]
rownames(mat) = letters[1:3]
se1 = RangedSummarizedExperiment(assays = list(mat))
se2 = RangedSummarizedExperiment(assays = list(mat))
se_list = list('SE1' = se1, 'SE2' = se2)
expect_true(validObject(RangedSummarizedExperimentList(se_list)))
# expect_true(validObject(.RangedSummarizedExperimentList())) #internal
# expect_true(validObject(RangedSummarizedExperimentList())) #exported
# expect_true(validObject(.SingleCellExperimentList())) #internal
# expect_true(validObject(SingleCellExperimentList())) #exported
# expect_true(validObject(.SpatialExperimentList())) #internal
# expect_true(validObject(SpatialExperimentList())) #exported
})
SingleCellExperiment()
library(ExperimentList)
devtools::test()
?SummarizedExperiment::`RangedSummarizedExperiment-class`
library(SummarizedExperiment)
expect_true(validObject(RangedSummarizedExperimentList())) #exported
#empty objects in the list
se_empty1 = SummarizedExperiment(rowRanges = GRangesList())
se_empty2 = SummarizedExperiment(rowRanges = GRangesList())
se_empty1
se_empty_list = list(se_empty1, se_empty2)
expect_error(RangedSummarizedExperimentList(se_empty_list))
names(se_empty_list) = LETTERS[1:2]
expect_true(validObject(RangedSummarizedExperimentList(se_empty_list)))
RangedSummarizedExperimentList(se_empty_list)
SummarizedExperimentList(se_empty_list)
SummarizedExperimentList(se_empty_list) |> class()
SummarizedExperimentList(se_empty_list) |> rowRanges()
RangedSummarizedExperimentList(se_empty_list)
RangedSummarizedExperimentList(se_empty_list) |> rowRanges()
library(ExperimentList)
devtools::test()
?GRangesList
GRanges("chr2", IRanges(3, 6))
GRanges("chr2", IRanges(3:5, 6:8))
devtools::test()
ExperimentList:::.SingleCellExperimentList()
SingleCellExperiment()
SingleCellExperimentList()
library(SingleCellExperiment)
#empty object
expect_true(validObject(.SingleCellExperimentList())) #internal
expect_true(validObject(SingleCellExperimentList())) #exported
library(SingleCellExperiment)
#empty object
expect_true(validObject(.SingleCellExperimentList())) #internal
expect_true(validObject(SingleCellExperimentList())) #exported
SingleCellExperimentList()
library(ExperimentList)
1
SingleCellExperiment:::.SingleCellExperimentList()
ExperimentList:::.SingleCellExperimentList()
ExperimentList:::.SingleCellExperimentList(SingleCellExperiment())
GRangesList
?GRangesList
usethis::use_package('GenomicRanges')
devtools::test()
#' @export
#' @import methods
#' @importClassesFrom SummarizedExperiment SummarizedExperiment
.SummarizedMultipleExperiment <- setClass(
'SummarizedMultipleExperiment',
slots = representation(experimentData = 'DataFrame', experimentIndex = 'numeric'),
contains = 'SummarizedExperiment'
)
library(SummarizedExperiment)
library(SpatialExperiment)
library(SpatialExperiment)
#' @export
#' @import methods
#' @importClassesFrom SummarizedExperiment SummarizedExperiment
.SummarizedMultipleExperiment <- setClass(
'SummarizedMultipleExperiment',
slots = representation(experimentData = 'DataFrame', experimentIndex = 'numeric'),
contains = 'SummarizedExperiment'
)
#' @export
#' @import methods
#' @importClassesFrom SummarizedExperiment RangedSummarizedExperiment
.RangedSummarizedMultipleExperiment <- setClass(
'RangedSummarizedMultipleExperiment',
slots = representation(experimentData = 'DataFrame', experimentIndex = 'numeric'),
contains = 'RangedSummarizedExperiment'
)
#' @export
#' @import methods
#' @importClassesFrom SingleCellExperiment SingleCellExperiment
.SingleCellMultipleExperiment <- setClass(
'SingleCellMultipleExperiment',
slots = representation(experimentData = 'DataFrame', experimentIndex = 'numeric'),
contains = 'SingleCellExperiment'
)
#' @export
#' @import methods
#' @importClassesFrom SpatialExperiment SpatialExperiment
.SpatialMultipleExperiment <- setClass(
'SpatialMultipleExperiment',
slots = representation(experimentData = 'DataFrame', experimentIndex = 'numeric'),
contains = 'SpatialExperiment'
)
setClassUnion(
'MultipleExperiment',
c(
'SummarizedMultipleExperiment',
'RangedSummarizedMultipleExperiment',
'SingleCellMultipleExperiment',
'SpatialMultipleExperiment'
)
)
library(MultipleExperiment)
